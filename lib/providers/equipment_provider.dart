import 'package:flutter/material.dart';
import '../models/department.dart';
import '../models/lab.dart';
import '../models/equipment.dart';
import '../services/equip_api.dart';
import 'auth_provider.dart';

class EquipmentProvider extends ChangeNotifier {
  final AuthProvider authProvider;

  EquipmentProvider({required this.authProvider});

  // Dropdown Data
  List<Department> departments = [];
  List<Lab> labs = [];
  List<Equipment> equipments = [];

  // Selections
  Department? selectedDept;
  Lab? selectedLab;
  Equipment? selectedEquipment;

  // Loading/Error
  bool isLoading = false;
  String? errorMessage;

  ApiService get _apiService => ApiService(token: authProvider.token);

  Future<void> loadDepartments() async {
    if (authProvider.token == null || authProvider.token!.isEmpty) return;

    isLoading = true;
    errorMessage = null;
    notifyListeners();

    try {
      departments = await _apiService.fetchDepartments();
      labs = [];
      equipments = [];
      selectedDept = null;
      selectedLab = null;
      selectedEquipment = null;
    } catch (e) {
      errorMessage = "Failed to load departments: $e";
    }

    isLoading = false;
    notifyListeners();
  }

  Future<void> selectDepartment(Department dept) async {
    selectedDept = dept;
    // No need to set isLoading here as the UI has its own loader
    errorMessage = null;
    labs = []; // Clear previous labs
    notifyListeners();

    try {
      labs = await _apiService.fetchLabs(departmentId: dept.id);
      selectedLab = null;
      equipments = [];
      selectedEquipment = null;
    } catch (e) {
      errorMessage = "Failed to load labs: $e";
    }

    notifyListeners();
  }

  Future<void> selectLab(Lab lab) async {
    selectedLab = lab;
    isLoading = true;
    errorMessage = null;
    notifyListeners();

    try {
      equipments = await _apiService.fetchEquipment(labId: lab.id);
      selectedEquipment = null;
    } catch (e) {
      errorMessage = "Failed to load equipments: $e";
    }

    isLoading = false;
    notifyListeners();
  }

  void selectEquipment(Equipment equip) {
    selectedEquipment = equip;
    notifyListeners();
  }

  Future<bool> addDepartment({required String name, required String description}) async {
    if (authProvider.token == null || authProvider.token!.isEmpty) {
      errorMessage = "Authentication token not found. Please log in again.";
      notifyListeners();
      return false;
    }

    errorMessage = null;
    notifyListeners();

    try {
      final newDepartment = Department(
        id: '', // ID is generated by the backend
        name: name,
        description: description,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
      
      final success = await _apiService.addDepartment(newDepartment);
      
      if (success) {
        await loadDepartments(); // Refresh the list after adding
        return true;
      } else {
        errorMessage = "Server failed to add the department.";
        notifyListeners();
        return false;
      }
    } catch (e) {
      errorMessage = "An error occurred: $e";
      notifyListeners();
      return false;
    }
  }

  Future<bool> addLab({required String name, required String location, required String departmentId}) async {
    if (authProvider.token == null || authProvider.token!.isEmpty) {
      errorMessage = "Authentication token not found. Please log in again.";
      notifyListeners();
      return false;
    }

    errorMessage = null;
    notifyListeners();

    try {
      final newLab = Lab(
        id: '', // Generated by backend
        name: name,
        location: location,
        department: DepartmentRef(id: departmentId, name: ''), // Name is not needed for the request
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      final success = await _apiService.addLab(newLab);
      
      if (success) {
        return true;
      } else {
        errorMessage = "Server failed to add the lab.";
        notifyListeners();
        return false;
      }
    } catch (e) {
      errorMessage = "An error occurred while adding the lab: $e";
      notifyListeners();
      return false;
    }
  }

  Future<bool> addEquipment({
    required String name,
    required String type,
    required String modelNumber,
    required String description,
    required String labId,
  }) async {
     if (authProvider.token == null || authProvider.token!.isEmpty) {
      errorMessage = "Authentication token not found. Please log in again.";
      notifyListeners();
      return false;
    }

    errorMessage = null;
    notifyListeners();

    try {
      final newEquipment = Equipment(
        id: '', // Generated by backend
        name: name,
        type: type,
        modelNumber: modelNumber,
        description: description,
        status: 'available', // Default status
        lab: LabRef(id: labId, name: ''), // Name not needed for request
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      final success = await _apiService.addEquipment(newEquipment);
      
      if (success) {
        return true;
      } else {
        errorMessage = "Server failed to add the equipment.";
        notifyListeners();
        return false;
      }

    } catch (e) {
      errorMessage = "An error occurred while adding equipment: $e";
      notifyListeners();
      return false;
    }
  }
}